#-*-coding:utf-8*-
#!/usr/bin/env python
''''''
'''
Модуль timeit позволяет измерить время выполнения небольших фрагментов кода с целью ОПТИМИЗАЦИИ ПРОГРАММЫ.
Измерения производятся с помощью класса Timer. 

Конструктор класса имеет следующий формат: Timer([stmt='pass'] [, setup='pass'] [, timer=<timer function>))
В параметре stmt указывается код (в виде СТРОКИ), ВРЕМЯ ВЫПОЛНЕНИЯ КОТОРОГО ПРЕДПОЛАГАЕТСЯ ИЗМЕРИТЬ. 
Параметр setup позволяет указать код, который будет выполнен перед измерением времени выполнения кода в параметре stmt. 
Например, в параметре setup можно подключить модуль.

Получить время выполнения можно с помощью метода timeit ( [number=1000000]). 
В параметре number указывается количество повторений. 
'''
print('Для примера просуммируем числа от 1 до 10000 тремя способами и выведем время выполнения каждого способа:')
from timeit import Timer
code1 = """
i, j = 1, 0
while i < 10001:
    j += i
    i += 1
"""
t1 = Timer(stmt=code1)
print("while:", t1.timeit(number=1000))

code2 = """\
j = 0
for i in range(1, 10001): 
    j += i
"""
t2 = Timer(stmt=code2)
print("for:", t2.timeit(number=1000))

code3 ="""\
j = sum(range(1, 10001)) 
"""
t3 = Timer(stmt=code3)
print("sum:", t3.timeit(number=1000))
print()
'''
МЕТОД repeat ( [repeat=3] [, nurnber=1000000]) ВЫЗЫВАЕТ МЕТОД timeit () УКАЗАННОЕ КОЛИЧЕСТВО РАЗ 
(задается в параметре repeat) и возвращает список значений. 
Аргумент number передается в качестве параметра методу timeit(). 
Для примера создадим список со строковыми представлениями чисел от 1 до 10000. 
В первом случае для создания списка используем цикл for и метод append(), а во втором - генератор списков 
'''
code1 = """
arr1 = []
for i in range(1, 10001):
    arr1.append(str(i))  #для создания списка используем цикл for и метод append()
"""
t1 = Timer(stmt=code1)
print("append:", t1.repeat(repeat=3, number=2000))

code2 = """\
arr2 = [str(i) for i in range(1, 10001)] # #для создания списка используем генератор списков 
"""
t2 = Timer(stmt=code2)
print("генератор:", t2.repeat(repeat=3, number=2000))
input()
