#-*-coding:utf-8*-
#!/usr/bin/env python
''''''
__name__ = "using_dict.py"
'''
Свойства словарей:
 - Словари ИЗМЕНЯЕМЫ - можно добавлять/изменять
 - ЭЛЕМЕНТЫ НЕ ИМЕЮТ ПОРЯДКА как и у Множеств - (общее  - фиурные скобки)
 - Все КЛЮЧИ РАЗНЫЕ и УНИКАЛЬНЫЕ, РАЗЛИЧИМЫЕ 
 - Все КЛЮЧИ НЕИЗМЕНЯЕМЫ - могут быть числа и строки, но не могут быть списки или словари
  
Обратите также внимание на то, что в словарях в качестве КЛЮЧЕЙ могут использоваться ТОЛЬКО НЕИЗМЕНЯЕМЫЕ объекты 
(как строки), а в качестве ЗНАЧЕНИЙ можно использовать КАК НЕИЗМЕНЯЕМЫЕ, так и ИЗМЕНЯЕМЫЕ ОБЪЕКТЫ. 
Точнее говоря, в качестве ключей должны использоваться только ПРОСТЫЕ объекты.
Помните, что пары ключ-значение никоим образом НЕ УПОРЯДОЧЕНЫ в словаре. 
Если вам необходим некоторый порядок, вам придётся ОТДЕЛЬНО ОТСОРТИРОВАТЬ СЛОВАРЬ перед обращением к нему.
Словари являются экземплярами/объектами класса dict.
Заметьте, что КЛЮЧ должен быть УНИКАЛЬНЫМ – вы ведь не сможете получить корректную информацию, 
если у вас записаны два человека с полностью одинаковыми именами.
'''
emptyDict = {}
print('Type of emptyDict is: ', type(emptyDict))
Dict = {1}
print('Type of Dict is: ', type(emptyDict))
Dict = {1:2}
print('Type of Dict is: ', type(emptyDict))

ab = {''
      'Swaroop': 'swaroop@swaroopch.com',
      'Larry': 'larry@wall.org',
      'Matsumoto': 'matz@ruby-lang.org',
      'Spammer': 'spammer@hotmail.com'
      }
ab['Spammer'] = 'the new value instead old' # значение будет ЗАТЕРТО
print('Значение ', '"spammer@hotmail.com"' ,' будет ЗАТЕРТО! этим значением:"', ab['Spammer'], '"' )
print('ЭЛЕМЕНТЫ "ab" НЕ ИМЕЮТ ПОРЯДКА: ', ab)
print("Адрес Swaroop'а:", ab['Swaroop'])
print('Метод items() возвращает СПИСОК КОРТЕЖЕЙ - ключ-значение:', ab.items())
del ab['Spammer'] #ab.pop('Spammer') # удаляем целиком пару
print('\nВ адресной книге {0} контактов\n'.format(len(ab)))
# Операции над словариками:
print('Операции над словариками:')

# Метод items, который возвращает СПИСОК КОРТЕЖЕЙ, каждый из которых содержит пару элементов: ключи значение
# получаем эту пару и присваиваем её значение переменнымname и address соответственно в цикле
for name, address in ab.items():
    print('Контакт {0} с адресом {1}'.format(name, address))
''' Новые пары ключ-значение добавляются простым обращением к нужному ключу при помощи оператора индексирования '''
#и присваиванием ему некоторого значения, как мы сделали для Guido в примере yb;t.
ab['Guido'] = 'guido@python.org' # Добавление пары ключ-значение
if 'Guido' in ab: #Проверить, существует ли пара ключ-значение, можно при помощи оператора in.
    print("\nАдрес Guido:", ab['Guido'])
########################################################################################################################
print()
print('Проход по элементам словаря:')
my_dict = {'a': 1, 'b': 2}

for item in my_dict.items():
    print(item)

# item — кортеж из двух элементов
# ('a', 1)
# ('b', 2)

# Распаковка кортежа item В ДВЕ ПЕРЕМЕННЫХ key и value:
for key, value in my_dict.items():
    print('%s -> %s' % (key, value))
    # a -> 1
    # b -> 2
