#-*-coding:utf-8*-
#!/usr/bin/env python
''''''
'''
Инструкция assert позволяет производить ПРОВЕРКИ ИСТИННОСТИ УТВЕРЖДЕНИЙ, что может быть использовано в ОТЛАДОЧНЫХ целях.
Если проверка не прошла, возбуждается ИСКЛЮЧЕНИЕ AssertionError.
Оператор assert существует для того, чтобы УКАЗАТЬ, ЧТО НЕЧТО ЯВЛЯЕТСЯ ИСТИНОЙ. Например, если требуется гарантировать,
что в списке будет хотя бы один элемент, и вызвать ОШИБКУ, если это НЕ ТАК, то оператор assert идеально подойдёт для такой задачи.
Когда заявленное выражение ЛОЖНО, вызывается ошибка AssertionError.
'''
mylist = ['item']
assert len(mylist) >= 1
pop = mylist.pop()  #выталкиваем последний элемент
print(pop)
print(mylist)
#assert len(mylist) >= 1 # вызывает AssertionError. Ожидаемое исключение!
'''
Тем не менее, оператор assert следует использовать БЛАГОРАЗУМНО. 
В БОЛЬШИНСТВЕ СЛУЧАЕВ гораздо лучше «ОТЛАВЛИВАТЬ» ИСКЛЮЧЕНИЯ и либо решать соответствующую проблему АВТОМАТИЧЕСКИ, 
либо выдавать пользователю сообщение об ошибке и завершать работу программы

РЕКОМЕНДУЕТСЯ использовать инструкцию ТОЛЬКО для проверки ВНУТРЕННЕГО СОСТОЯНИЯ программы — ситуаций, 
которые НЕ ДОЛЖНЫ ПРОИСХОДИТЬ ВОВСЕ, которые НЕЛЬЗЯ ОБРАБОТАТЬ или это НЕ ИМЕЕТ СМЫСЛА 
(обычно это является указанием на то, что код программы содержит ошибку).
Инструкция также может использоваться для ДОКУМЕНТИРОВАНИЯ ОЖИДАНИЙ (например, входных параметров или результата). 
В остальных случаях следует определять СВОИ ТИПЫ исключений.
'''
# для примеров ниже закомментить строку 13: assert len(mylist) >= 1 # вызывает AssertionError. Ожидаемое исключение!
passed = False
assert passed, 'Not passed'  # Поднимается исключение.

# Запись выше эквивалентна следующей конструкции:
if __debug__:
    if not passed:
        raise AssertionError('Not passed')

# Пример правильного переноса строки описания:
    assert a, ('Long exception '
               'description chunked.')